// <auto-generated />
using System;
using ASC.Migrations.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASC.Migrations.PostgreSql.Migrations
{
    [DbContext(typeof(MigrationContext))]
    partial class MigrationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ASC.Core.Common.EF.Acl", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<Guid>("Subject")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("subject");

                    b.Property<Guid>("Action")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("action");

                    b.Property<string>("Object")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("object")
                        .HasDefaultValueSql("''");

                    b.Property<int>("AceType")
                        .HasColumnType("integer")
                        .HasColumnName("acetype");

                    b.HasKey("TenantId", "Subject", "Action", "Object")
                        .HasName("core_acl_pkey");

                    b.ToTable("core_acl", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("5d5b7260-f7f7-49f1-a1c9-95fbb6a12604"),
                            Action = new Guid("ef5e6790-f346-4b6e-b662-722bc28cb0db"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("5d5b7260-f7f7-49f1-a1c9-95fbb6a12604"),
                            Action = new Guid("f11e8f3f-46e6-4e55-90e3-09c22ec565bd"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("088d5940-a80f-4403-9741-d610718ce95c"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("08d66144-e1c9-4065-9aa1-aa4bba0a7bc8"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("08d75c97-cf3f-494b-90d1-751c941fe2dd"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("0d1f72a8-63da-47ea-ae42-0900e4ac72a9"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("13e30b51-5b4d-40a5-8575-cb561899eeb1"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("19f658ae-722b-4cd8-8236-3ad150801d96"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("2c6552b3-b2e0-4a00-b8fd-13c161e337b1"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("388c29d3-c662-4a61-bf47-fc2f7094224a"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("40bf31f4-3132-4e76-8d5c-9828a89501a3"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("49ae8915-2b30-4348-ab74-b152279364fb"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("63e9f35f-6bb5-4fb1-afaa-e4c2f4dec9bd"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("9018c001-24c2-44bf-a1db-d1121a570e74"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("948ad738-434b-4a88-8e38-7569d332910a"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("9d75a568-52aa-49d8-ad43-473756cd8903"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("a362fe79-684e-4d43-a599-65bc1f4e167f"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("c426c349-9ad4-47cd-9b8f-99fc30675951"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("d11ebcb9-0e6e-45e6-a6d0-99c41d687598"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("d1f3b53d-d9e2-4259-80e7-d24380978395"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("d49f4e30-da10-4b39-bc6d-b41ef6e039d3"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("abef62db-11a8-4673-9d32-ef1d8af19dc0"),
                            Action = new Guid("d852b66f-6719-45e1-8657-18f0bb791690"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("e0759a42-47f0-4763-a26a-d5aa665bec35"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("e37239bd-c5b5-4f1e-a9f8-3ceeac209615"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("fbc37705-a04c-40ad-a68c-ce2f0423f397"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("fcac42b8-9386-48eb-a938-d19b3c576912"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("13e30b51-5b4d-40a5-8575-cb561899eeb1"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("49ae8915-2b30-4348-ab74-b152279364fb"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("63e9f35f-6bb5-4fb1-afaa-e4c2f4dec9bd"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("9018c001-24c2-44bf-a1db-d1121a570e74"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("d1f3b53d-d9e2-4259-80e7-d24380978395"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("e0759a42-47f0-4763-a26a-d5aa665bec35"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("e37239bd-c5b5-4f1e-a9f8-3ceeac209615"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("f11e88d7-f185-4372-927c-d88008d2c483"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("ba74ca02-873f-43dc-8470-8620c156bc67"),
                            Action = new Guid("f11e8f3f-46e6-4e55-90e3-09c22ec565bd"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("00e7dfc5-ac49-4fd3-a1d6-98d84e877ac4"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("14be970f-7af5-4590-8e81-ea32b5f7866d"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("18ecc94d-6afa-4994-8406-aee9dff12ce2"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("298530eb-435e-4dc6-a776-9abcd95c70e9"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("430eaf70-1886-483c-a746-1a18e3e6bb63"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("557d6503-633b-4490-a14c-6473147ce2b3"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("724cbb75-d1c9-451e-bae0-4de0db96b1f7"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("7cb5c0d1-d254-433f-abe3-ff23373ec631"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("91b29dcd-9430-4403-b17a-27d09189be88"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("a18480a4-6d18-4c71-84fa-789888791f45"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("b630d29b-1844-4bda-bbbe-cf5542df3559"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("c62a9e8d-b24c-4513-90aa-7ff0f8ba38eb"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("d7cdb020-288b-41e5-a857-597347618533"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("662f3db7-9bc8-42cf-84da-2765f563e9b0"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("712d9ec3-5d2b-4b13-824f-71f00191dcca"),
                            Action = new Guid("e0759a42-47f0-4763-a26a-d5aa665bec35"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("bba32183-a14d-48ed-9d39-c6b4d8925fbf"),
                            Action = new Guid("0d68b142-e20a-446e-a832-0d6b0b65a164"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("6f05c382-8bca-4469-9424-c807a98c40d7"),
                            Object = "",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|1e04460243b54d7982f3fd6208a11960",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|6743007c6f954d208c88a8601ce5e76d",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|e67be73df9ae4ce18fec1880cb518cb4",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|ea942538e68e49079394035336ee0ba8",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|32d24cb57ece46069c9419216ba42086",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|bf88953e3c434850a3fbb1e43ad53a3e",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|2a9230378b2d487b9a225ac0918acf3f",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|f4d98afdd336433287783c6945c81ea0",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|28b10049dd204f54b986873bc14ccfc7",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|3cfd481b46f24a4ab55cb8c0c9def02c",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|6a598c7491ae437da5f4ad339bd11bb2",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|742cf945cbbc4a5782d61600a12cf8ca",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|853b6eb973ee438d9b098ffeedf36234",
                            AceType = 1
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|46cfa73af32046cf8d5bcd82e1d67f26",
                            AceType = 0
                        },
                        new
                        {
                            TenantId = -1,
                            Subject = new Guid("c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e"),
                            Action = new Guid("77777777-32ae-425f-99b5-83176061d1ae"),
                            Object = "ASC.Web.Core.WebItemSecurity+WebItemSecurityObject|37620ae5c40b45ce855a39dd7d76a1fa",
                            AceType = 0
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("categoryid")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("parentid")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("sid")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("Id");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("last_modified");

                    b.HasIndex("TenantId", "ParentId")
                        .HasDatabaseName("parentid");

                    b.ToTable("core_group", (string)null);
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbQuota", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Features")
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("product_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("TenantId")
                        .HasName("tenants_quota_pkey");

                    b.ToTable("tenants_quota", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = -1,
                            Features = "trial,audit,ldap,sso,whitelabel,thirdparty,restore,oauth,total_size:107374182400,file_size:100,manager:1",
                            Name = "trial",
                            Price = 0m,
                            Visible = false
                        },
                        new
                        {
                            TenantId = -2,
                            Features = "audit,ldap,sso,whitelabel,thirdparty,restore,oauth,contentsearch,total_size:107374182400,file_size:1024,manager:1",
                            Name = "admin",
                            Price = 30m,
                            ProductId = "1002",
                            Visible = true
                        },
                        new
                        {
                            TenantId = -3,
                            Features = "free,total_size:2147483648,manager:3,room:12",
                            Name = "startup",
                            Price = 0m,
                            Visible = false
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbQuotaRow", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path");

                    b.Property<long>("Counter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("counter")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Tag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("tag")
                        .HasDefaultValueSql("'0'");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("TenantId", "Path")
                        .HasName("tenants_quotarow_pkey");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("last_modified_tenants_quotarow");

                    b.ToTable("tenants_quotarow", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbSubscriptionMethod", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<string>("Source")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("source");

                    b.Property<string>("Action")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("action");

                    b.Property<string>("Recipient")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("recipient");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("sender");

                    b.HasKey("TenantId", "Source", "Action", "Recipient")
                        .HasName("core_subscriptionmethod_pkey");

                    b.ToTable("core_subscriptionmethod", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "send_whats_new",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6504977c-75af-4691-9099-084d3ddeea04",
                            Action = "new feed",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6a598c74-91ae-437d-a5f4-ad339bd11bb2",
                            Action = "new post",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "853b6eb9-73ee-438d-9b09-8ffeedf36234",
                            Action = "new topic in forum",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "9d51954f-db9b-4aed-94e3-ed70b914e101",
                            Action = "new photo uploaded",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "28b10049-dd20-4f54-b986-873bc14ccfc7",
                            Action = "new bookmark created",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "742cf945-cbbc-4a57-82d6-1600a12cf8ca",
                            Action = "new wiki page",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "37620ae5-c40b-45ce-855a-39dd7d76a1fa",
                            Action = "BirthdayReminder",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6fe286a4-479e-4c25-a8d9-0156e332b0c0",
                            Action = "sharedocument",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6fe286a4-479e-4c25-a8d9-0156e332b0c0",
                            Action = "sharefolder",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6fe286a4-479e-4c25-a8d9-0156e332b0c0",
                            Action = "updatedocument",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "invitetoproject",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "milestonedeadline",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "newcommentformessage",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "newcommentformilestone",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "newcommentfortask",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "projectcreaterequest",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "projecteditrequest",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "removefromproject",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "responsibleforproject",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "responsiblefortask",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6045b68c-2c2e-42db-9e53-c272e814c4ad",
                            Action = "taskclosed",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "40650da3-f7c1-424c-8c89-b9c115472e08",
                            Action = "calendar_sharing",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "40650da3-f7c1-424c-8c89-b9c115472e08",
                            Action = "event_alert",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "admin_notify",
                            Recipient = "cd84e66b-b803-40fc-99f9-b2969a54a1de",
                            Sender = "email.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "SetAccess",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ResponsibleForTask",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "AddRelationshipEvent",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ExportCompleted",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "CreateNewContact",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ResponsibleForOpportunity",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Sender = "email.sender|messanger.sender"
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "periodic_notify",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Sender = "email.sender"
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("CreateOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customer_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("Stamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stamp");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_tenants_tariff");

                    b.ToTable("tenants_tariff", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbTariffRow", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant");

                    b.Property<int>("TariffId")
                        .HasColumnType("int")
                        .HasColumnName("tariff_id");

                    b.Property<int>("Quota")
                        .HasColumnType("int")
                        .HasColumnName("quota");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("TenantId", "TariffId", "Quota")
                        .HasName("PRIMARY");

                    b.ToTable("tenants_tariffrow", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.FireBaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Application")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("application");

                    b.Property<string>("FirebaseDeviceToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firebase_device_token");

                    b.Property<bool?>("IsSubscribed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_subscribed");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("firebase_users_pkey");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("user_id");

                    b.ToTable("firebase_users", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.AccountLinks", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("id");

                    b.Property<string>("UId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("uid");

                    b.Property<DateTime>("Linked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("linked");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile");

                    b.Property<string>("Provider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60)
                        .HasColumnType("character(60)")
                        .HasColumnName("provider")
                        .HasDefaultValueSql("NULL")
                        .IsFixedLength();

                    b.HasKey("Id", "UId")
                        .HasName("account_links_pkey");

                    b.HasIndex("UId")
                        .HasDatabaseName("uid");

                    b.ToTable("account_links", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbCoreSettings", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("value");

                    b.HasKey("TenantId", "Id")
                        .HasName("core_settings_pkey");

                    b.ToTable("core_settings", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = -1,
                            Id = "CompanyWhiteLabelSettings",
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = new byte[] { 245, 71, 4, 138, 72, 101, 23, 21, 135, 217, 206, 188, 138, 73, 108, 96, 29, 150, 3, 31, 44, 28, 62, 145, 96, 53, 57, 66, 238, 118, 93, 172, 211, 22, 244, 181, 244, 40, 146, 67, 111, 196, 162, 27, 154, 109, 248, 255, 181, 17, 253, 127, 42, 65, 19, 90, 26, 206, 203, 145, 159, 159, 243, 105, 24, 71, 188, 165, 53, 85, 57, 37, 186, 251, 57, 96, 18, 162, 218, 80, 0, 101, 250, 100, 66, 97, 24, 51, 240, 215, 216, 169, 105, 100, 15, 253, 29, 83, 182, 236, 203, 53, 68, 251, 2, 150, 149, 148, 58, 136, 84, 37, 151, 82, 92, 227, 30, 52, 111, 40, 154, 155, 7, 126, 149, 100, 169, 87, 10, 129, 228, 138, 177, 101, 77, 67, 177, 216, 189, 201, 1, 213, 136, 216, 107, 198, 253, 221, 106, 255, 198, 17, 68, 14, 110, 90, 174, 182, 68, 222, 188, 77, 157, 19, 26, 68, 86, 97, 15, 81, 24, 171, 214, 114, 191, 175, 56, 56, 48, 52, 125, 82, 253, 113, 71, 41, 201, 5, 8, 118, 162, 191, 99, 196, 48, 198, 223, 79, 204, 174, 31, 97, 236, 20, 213, 218, 85, 34, 16, 74, 196, 209, 235, 14, 71, 209, 32, 131, 195, 84, 11, 66, 74, 19, 115, 255, 99, 69, 235, 210, 204, 15, 13, 4, 143, 127, 152, 125, 212, 91 }
                        },
                        new
                        {
                            TenantId = -1,
                            Id = "FullTextSearchSettings",
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = new byte[] { 8, 120, 207, 5, 153, 181, 23, 202, 162, 211, 218, 237, 157, 6, 76, 62, 220, 238, 175, 67, 31, 53, 166, 246, 66, 220, 173, 160, 72, 23, 227, 81, 50, 39, 187, 177, 222, 110, 43, 171, 235, 158, 16, 119, 178, 207, 49, 140, 72, 152, 20, 84, 94, 135, 117, 1, 246, 51, 251, 190, 148, 2, 44, 252, 221, 2, 91, 83, 149, 151, 58, 245, 16, 148, 52, 8, 187, 86, 150, 46, 227, 93, 163, 95, 47, 131, 116, 207, 95, 209, 38, 149, 53, 148, 73, 215, 206, 251, 194, 199, 189, 17, 42, 229, 135, 82, 23, 154, 162, 165, 158, 94, 23, 128, 30, 88, 12, 204, 96, 250, 236, 142, 189, 211, 214, 18, 196, 136, 102, 102, 217, 109, 108, 240, 96, 96, 94, 100, 201, 10, 31, 170, 128, 192 }
                        },
                        new
                        {
                            TenantId = -1,
                            Id = "SmtpSettings",
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = new byte[] { 240, 82, 224, 144, 161, 163, 117, 13, 173, 205, 78, 153, 97, 218, 4, 170, 81, 239, 1, 151, 226, 192, 98, 60, 241, 44, 88, 56, 191, 164, 10, 155, 72, 186, 239, 203, 227, 113, 88, 119, 49, 215, 227, 220, 158, 124, 96, 9, 116, 47, 158, 65, 93, 86, 219, 15, 10, 224, 142, 50, 248, 144, 75, 44, 68, 28, 198, 87, 198, 69, 67, 234, 238, 38, 32, 68, 162, 139, 67, 53, 220, 176, 240, 196, 233, 64, 29, 137, 31, 160, 99, 105, 249, 132, 202, 45, 71, 92, 134, 194, 55, 145, 121, 97, 197, 130, 119, 105, 131, 21, 133, 35, 10, 102, 172, 119, 135, 230, 251, 86, 253, 62, 55, 56, 146, 103, 164, 106 }
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbIPLookup", b =>
                {
                    b.Property<string>("AddrType")
                        .HasColumnType("enum('ipv4','ipv6')")
                        .HasColumnName("addr_type");

                    b.Property<byte[]>("IPStart")
                        .HasColumnType("varbinary(16)")
                        .HasColumnName("ip_start");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasColumnName("city");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("continent");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("country");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasColumnName("district");

                    b.Property<int?>("GeonameId")
                        .HasColumnType("int(10)")
                        .HasColumnName("geoname_id");

                    b.Property<byte[]>("IPEnd")
                        .IsRequired()
                        .HasColumnType("varbinary(16)")
                        .HasColumnName("ip_end");

                    b.Property<float>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<float>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("StateProv")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasColumnName("stateprov");

                    b.Property<string>("StateProvCode")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("stateprov_code");

                    b.Property<string>("TimezoneName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("timezone_name");

                    b.Property<float>("TimezoneOffset")
                        .HasColumnType("float")
                        .HasColumnName("timezone_offset");

                    b.Property<string>("WeatherCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("weather_code");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zipcode");

                    b.HasKey("AddrType", "IPStart");

                    b.ToTable("dbip_lookup", (string)null);

                    b.HasAnnotation("MySql:CharSet", "utf8mb4");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alias");

                    b.Property<bool>("Calls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("calls")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationdatetime");

                    b.Property<int>("Industry")
                        .HasColumnType("integer")
                        .HasColumnName("industry");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'en-US'")
                        .IsFixedLength();

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MappedDomain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mappeddomain")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("payment_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("Spam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("spam")
                        .HasDefaultValueSql("true");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("statuschanged");

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TrustedDomainsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("trusteddomainsenabled")
                        .HasDefaultValueSql("1");

                    b.Property<string>("TrustedDomainsRaw")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("trusteddomains")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("version")
                        .HasDefaultValueSql("2");

                    b.Property<DateTime?>("Version_Changed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("version_changed");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasDatabaseName("alias");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("last_modified_tenants_tenants");

                    b.HasIndex("MappedDomain")
                        .HasDatabaseName("mappeddomain");

                    b.HasIndex("Version")
                        .HasDatabaseName("version");

                    b.ToTable("tenants_tenants", "onlyoffice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "localhost",
                            Calls = false,
                            CreationDateTime = new DateTime(2021, 3, 9, 17, 46, 59, 97, DateTimeKind.Utc).AddTicks(4317),
                            Industry = 0,
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Web Office",
                            OwnerId = new Guid("66faa6e4-f133-11ea-b126-00ffeec8b4ef"),
                            Spam = false,
                            Status = 0,
                            TrustedDomainsEnabled = 0,
                            Version = 0
                        },
                        new
                        {
                            Id = -1,
                            Alias = "settings",
                            Calls = false,
                            CreationDateTime = new DateTime(2021, 3, 9, 17, 46, 59, 97, DateTimeKind.Utc).AddTicks(4317),
                            Industry = 0,
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Web Office",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Spam = false,
                            Status = 1,
                            TrustedDomainsEnabled = 0,
                            Version = 0
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantForbiden", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.HasKey("Address")
                        .HasName("tenants_forbiden_pkey");

                    b.ToTable("tenants_forbiden", "onlyoffice");

                    b.HasData(
                        new
                        {
                            Address = "controlpanel"
                        },
                        new
                        {
                            Address = "localhost"
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantVersion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DefaultVersion")
                        .HasColumnType("integer")
                        .HasColumnName("default_version");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("url");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("version");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id");

                    b.ToTable("tenants_version", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbWebstudioIndex", b =>
                {
                    b.Property<string>("IndexName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("index_name");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("IndexName")
                        .HasName("webstudio_index_pkey");

                    b.ToTable("webstudio_index", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbWebstudioSettings", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("TenantID");

                    b.Property<Guid>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("uuid")
                        .HasColumnName("UserID");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TenantId", "Id", "UserId")
                        .HasName("webstudio_settings_pkey");

                    b.HasIndex("Id")
                        .HasDatabaseName("ID");

                    b.ToTable("webstudio_settings", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            Id = new Guid("9a925891-1f92-4ed7-b277-d6f649739f06"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Data = "{\"Completed\":false}"
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbWebstudioUserVisit", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visitdate");

                    b.Property<Guid>("ProductId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<DateTime?>("FirstVisitTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("firstvisittime");

                    b.Property<DateTime?>("LastVisitTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastvisittime");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer")
                        .HasColumnName("visitcount");

                    b.HasKey("TenantId", "VisitDate", "ProductId", "UserId")
                        .HasName("webstudio_uservisit_pkey");

                    b.HasIndex("VisitDate")
                        .HasDatabaseName("visitdate");

                    b.ToTable("webstudio_uservisit", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.FilesConverts", b =>
                {
                    b.Property<string>("Input")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("input");

                    b.Property<string>("Output")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("output");

                    b.HasKey("Input", "Output")
                        .HasName("files_converts_pkey");

                    b.ToTable("files_converts", "onlyoffice");

                    b.HasData(
                        new
                        {
                            Input = ".csv",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".csv",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".doc",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".docm",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".doct",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".docx",
                            Output = ".docxf"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".oform"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".docxf",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".dot",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".dotm",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".dotx",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".dps",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".dpt",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".epub",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".et",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".ett",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".fb2",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".fodp",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".fods",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".fodt",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".htm",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".html",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".mht",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".mhtml",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".odp",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".otp",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".ods",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".ots",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".odt",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".ott",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".oxps",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".pdf",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".pot",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".potm",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".potx",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".pps",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".ppsm",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".ppsx",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".ppt",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".pptm",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".pptt",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".pptx",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".rtf",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".stw",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".sxc",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".odp"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".otp"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".potm"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".potx"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".ppsm"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".ppsx"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".pptm"
                        },
                        new
                        {
                            Input = ".sxi",
                            Output = ".pptx"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".sxw",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".txt",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".wps",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".wpt",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xls",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xlsb",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xlsm",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xlsx",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xlst",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xlt",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".xltx"
                        },
                        new
                        {
                            Input = ".xltm",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".csv"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".ods"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".ots"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".xlsm"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".xltm"
                        },
                        new
                        {
                            Input = ".xltx",
                            Output = ".xlsx"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".xml",
                            Output = ".txt"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".docm"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".docx"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".dotm"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".dotx"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".epub"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".fb2"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".html"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".odt"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".ott"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".pdf"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".rtf"
                        },
                        new
                        {
                            Input = ".xps",
                            Output = ".txt"
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.MobileAppInstall", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_email");

                    b.Property<int>("AppType")
                        .HasColumnType("integer")
                        .HasColumnName("app_type");

                    b.Property<DateTime?>("LastSign")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_on");

                    b.HasKey("UserEmail", "AppType")
                        .HasName("mobile_app_install_pkey");

                    b.ToTable("mobile_app_install", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.NotifyInfo", b =>
                {
                    b.Property<int>("NotifyId")
                        .HasColumnType("integer")
                        .HasColumnName("notify_id");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("NotifyId")
                        .HasName("notify_info_pkey");

                    b.HasIndex("State")
                        .HasDatabaseName("state");

                    b.ToTable("notify_info", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.NotifyQueue", b =>
                {
                    b.Property<int>("NotifyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notify_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Attachments")
                        .HasColumnType("text")
                        .HasColumnName("attachments");

                    b.Property<string>("AutoSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("auto_submitted")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("content_type")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Reciever")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reciever")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ReplyTo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("reply_to")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Sender")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sender")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("SenderType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("sender_type")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Subject")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("subject")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.HasKey("NotifyId")
                        .HasName("notify_queue_pkey");

                    b.HasIndex("TenantId");

                    b.ToTable("notify_queue", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.Regions", b =>
                {
                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.HasKey("Region");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.TelegramUser", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("PortalUserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("portal_user_id");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.HasKey("TenantId", "PortalUserId")
                        .HasName("telegram_users_pkey");

                    b.HasIndex("TelegramUserId")
                        .HasDatabaseName("tgId");

                    b.ToTable("telegram_users", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.TenantIpRestrictions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ForAdmin")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("for_admin");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_tenants_iprestrictions");

                    b.ToTable("tenants_iprestrictions", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Subscription", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<string>("Source")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("source");

                    b.Property<string>("Action")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("action");

                    b.Property<string>("Recipient")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("recipient");

                    b.Property<string>("Object")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("object");

                    b.Property<bool>("Unsubscribed")
                        .HasColumnType("boolean")
                        .HasColumnName("unsubscribed");

                    b.HasKey("TenantId", "Source", "Action", "Recipient", "Object")
                        .HasName("core_subscription_pkey");

                    b.ToTable("core_subscription", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "send_whats_new",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "rooms_activity",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6504977c-75af-4691-9099-084d3ddeea04",
                            Action = "new feed",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6a598c74-91ae-437d-a5f4-ad339bd11bb2",
                            Action = "new post",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "853b6eb9-73ee-438d-9b09-8ffeedf36234",
                            Action = "new topic in forum",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "9d51954f-db9b-4aed-94e3-ed70b914e101",
                            Action = "new photo uploaded",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "28b10049-dd20-4f54-b986-873bc14ccfc7",
                            Action = "new bookmark created",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "742cf945-cbbc-4a57-82d6-1600a12cf8ca",
                            Action = "new wiki page",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "37620ae5-c40b-45ce-855a-39dd7d76a1fa",
                            Action = "BirthdayReminder",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6fe286a4-479e-4c25-a8d9-0156e332b0c0",
                            Action = "sharedocument",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "6fe286a4-479e-4c25-a8d9-0156e332b0c0",
                            Action = "sharefolder",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "40650da3-f7c1-424c-8c89-b9c115472e08",
                            Action = "calendar_sharing",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "40650da3-f7c1-424c-8c89-b9c115472e08",
                            Action = "event_alert",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "admin_notify",
                            Recipient = "cd84e66b-b803-40fc-99f9-b2969a54a1de",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "SetAccess",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ResponsibleForTask",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "AddRelationshipEvent",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ExportCompleted",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "CreateNewContact",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "13ff36fb-0272-4887-b416-74f52b0d0b02",
                            Action = "ResponsibleForOpportunity",
                            Recipient = "abef62db-11a8-4673-9d32-ef1d8af19dc0",
                            Object = "",
                            Unsubscribed = false
                        },
                        new
                        {
                            TenantId = -1,
                            Source = "asc.web.studio",
                            Action = "periodic_notify",
                            Recipient = "c5cc67d1-c3e8-43c0-a3ad-3928ae3e5b5e",
                            Object = "",
                            Unsubscribed = false
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ActivationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("activation_status");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bithdate");

                    b.Property<string>("Contacts")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("contacts")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CultureName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("culture")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("firstname");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("lastname");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("MobilePhone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("MobilePhoneActivation")
                        .HasColumnType("integer")
                        .HasColumnName("phone_activation");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("notes")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean")
                        .HasColumnName("sex");

                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("sid")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("SsoNameId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("sso_name_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("SsoSessionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("sso_session_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("1");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<DateTime?>("TerminatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("terminateddate");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.Property<DateTime?>("WorkFromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("workfromdate");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("email");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("last_modified_core_user");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserName", "TenantId")
                        .HasDatabaseName("username");

                    b.ToTable("core_user", "onlyoffice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66faa6e4-f133-11ea-b126-00ffeec8b4ef"),
                            ActivationStatus = 0,
                            CreateDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            FirstName = "Administrator",
                            LastModified = new DateTime(2021, 3, 9, 9, 52, 55, 765, DateTimeKind.Utc).AddTicks(1420),
                            LastName = "",
                            MobilePhoneActivation = 0,
                            Removed = false,
                            Status = 1,
                            TenantId = 1,
                            UserName = "administrator",
                            WorkFromDate = new DateTime(2021, 3, 9, 9, 52, 55, 764, DateTimeKind.Utc).AddTicks(9157)
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserDav", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "UserId")
                        .HasName("core_userdav_pkey");

                    b.ToTable("core_userdav", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserGroup", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.Property<Guid>("Userid")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<Guid>("UserGroupId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<int>("RefType")
                        .HasColumnType("integer")
                        .HasColumnName("ref_type");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean")
                        .HasColumnName("removed");

                    b.HasKey("TenantId", "Userid", "UserGroupId", "RefType")
                        .HasName("core_usergroup_pkey");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("last_modified_core_usergroup");

                    b.ToTable("core_usergroup", "onlyoffice");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            Userid = new Guid("66faa6e4-f133-11ea-b126-00ffeec8b4ef"),
                            UserGroupId = new Guid("cd84e66b-b803-40fc-99f9-b2969a54a1de"),
                            RefType = 0,
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Removed = false
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserPhoto", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("UserId")
                        .HasName("core_userphoto_pkey");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_core_userphoto");

                    b.ToTable("core_userphoto", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserSecurity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PwdHash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("pwdhash")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("UserId")
                        .HasName("core_usersecurity_pkey");

                    b.HasIndex("PwdHash")
                        .HasDatabaseName("pwdhash");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_core_usersecurity");

                    b.ToTable("core_usersecurity", "onlyoffice");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("66faa6e4-f133-11ea-b126-00ffeec8b4ef"),
                            LastModified = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PwdHash = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.Hosting.InstanceRegistration", b =>
                {
                    b.Property<string>("InstanceRegistrationId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("instance_registration_id")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated");

                    b.Property<string>("WorkerTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("worker_type_name")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("InstanceRegistrationId")
                        .HasName("PRIMARY");

                    b.HasIndex("WorkerTypeName")
                        .HasDatabaseName("worker_type_name");

                    b.ToTable("hosting_instance_registration", (string)null);
                });

            modelBuilder.Entity("ASC.Data.Backup.EF.Model.BackupRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("char")
                        .HasColumnName("id")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("ExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("expires_on")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hash")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("IsScheduled")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("is_scheduled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("Removed")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("removed");

                    b.Property<string>("StorageBasePath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("storage_base_path")
                        .HasDefaultValueSql("NULL")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("StorageParams")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("storage_params")
                        .HasDefaultValueSql("NULL")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("storage_path")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("StorageType")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("storage_type");

                    b.Property<int>("TenantId")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ExpiresOn")
                        .HasDatabaseName("expires_on");

                    b.HasIndex("IsScheduled")
                        .HasDatabaseName("is_scheduled");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_id");

                    b.ToTable("backup_backup", (string)null);
                });

            modelBuilder.Entity("ASC.Data.Backup.EF.Model.BackupSchedule", b =>
                {
                    b.Property<int>("TenantId")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("BackupsStored")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("backups_stored");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cron")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("LastBackupTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_backup_time");

                    b.Property<string>("StorageBasePath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("storage_base_path")
                        .HasDefaultValueSql("NULL")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("StorageParams")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("storage_params")
                        .HasDefaultValueSql("NULL")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("StorageType")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("storage_type");

                    b.HasKey("TenantId")
                        .HasName("PRIMARY");

                    b.ToTable("backup_schedule", (string)null);
                });

            modelBuilder.Entity("ASC.EventBus.Extensions.Logger.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(38)")
                        .HasColumnName("event_id")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("char(38)")
                        .HasColumnName("create_by")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime")
                        .HasColumnName("create_on");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("event_type_name")
                        .UseCollation("utf8_general_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("State")
                        .HasColumnType("int(11)")
                        .HasColumnName("state");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TimesSent")
                        .HasColumnType("int(11)")
                        .HasColumnName("times_sent");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("EventId")
                        .HasName("PRIMARY");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_id");

                    b.ToTable("event_bus_integration_event_log", (string)null);

                    b.HasAnnotation("MySql:CharSet", "utf8");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedAggregate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(88)
                        .HasColumnType("character varying(88)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AggregateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("aggregated_date");

                    b.Property<Guid>("Author")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("author")
                        .IsFixedLength();

                    b.Property<string>("ContextId")
                        .HasColumnType("text")
                        .HasColumnName("context_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("group_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("json");

                    b.Property<string>("Keywords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<Guid>("ModifiedBy")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by")
                        .IsFixedLength();

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("module");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "AggregateDate")
                        .HasDatabaseName("aggregated_date");

                    b.HasIndex("TenantId", "ModifiedDate")
                        .HasDatabaseName("modified_date");

                    b.HasIndex("TenantId", "Product")
                        .HasDatabaseName("product");

                    b.ToTable("feed_aggregate", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedLast", b =>
                {
                    b.Property<string>("LastKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_key");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_date");

                    b.HasKey("LastKey")
                        .HasName("feed_last_pkey");

                    b.ToTable("feed_last", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedReaded", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Module")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("module");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("UserId", "TenantId", "Module")
                        .HasName("feed_readed_pkey");

                    b.HasIndex("TenantId");

                    b.ToTable("feed_readed", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedUsers", b =>
                {
                    b.Property<string>("FeedId")
                        .HasMaxLength(88)
                        .HasColumnType("character varying(88)")
                        .HasColumnName("feed_id");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.HasKey("FeedId", "UserId")
                        .HasName("feed_users_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("user_id_feed_users");

                    b.ToTable("feed_users", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Changes")
                        .HasColumnType("text")
                        .HasColumnName("changes");

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<long>("ContentLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("content_length")
                        .HasDefaultValueSql("'0'::bigint");

                    b.Property<string>("ConvertedType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("converted_type")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<Guid>("CreateBy")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("create_by")
                        .IsFixedLength();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on");

                    b.Property<bool>("CurrentVersion")
                        .HasColumnType("boolean")
                        .HasColumnName("current_version");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("boolean")
                        .HasColumnName("encrypted");

                    b.Property<int>("FileStatus")
                        .HasColumnType("integer")
                        .HasColumnName("file_status");

                    b.Property<int>("Forcesave")
                        .HasColumnType("integer")
                        .HasColumnName("forcesave");

                    b.Property<Guid>("ModifiedBy")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by")
                        .IsFixedLength();

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("folder_id");

                    b.Property<int>("ThumbnailStatus")
                        .HasColumnType("integer")
                        .HasColumnName("thumb");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.Property<int>("VersionGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("version_group")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id", "TenantId", "Version")
                        .HasName("files_file_pkey");

                    b.HasIndex("Id")
                        .HasDatabaseName("id");

                    b.HasIndex("ModifiedOn")
                        .HasDatabaseName("modified_on_files_file");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("folder_id");

                    b.HasIndex("TenantId");

                    b.ToTable("files_file", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesBunchObjects", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("RightNode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("right_node");

                    b.Property<string>("LeftNode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("left_node");

                    b.HasKey("TenantId", "RightNode")
                        .HasName("files_bunch_objects_pkey");

                    b.HasIndex("LeftNode")
                        .HasDatabaseName("left_node");

                    b.ToTable("files_bunch_objects", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesLink", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("SourceId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("source_id");

                    b.Property<string>("LinkedId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("linked_id");

                    b.Property<Guid>("LinkedFor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("linked_for")
                        .HasDefaultValueSql("NULL::bpchar")
                        .IsFixedLength();

                    b.HasKey("TenantId", "SourceId", "LinkedId")
                        .HasName("files_link_pkey");

                    b.HasIndex("TenantId", "SourceId", "LinkedId", "LinkedFor")
                        .HasDatabaseName("linked_for_files_link");

                    b.ToTable("files_link", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesProperties", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("EntryId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entry_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.HasKey("TenantId", "EntryId")
                        .HasName("files_properties_pkey");

                    b.ToTable("files_properties", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesSecurity", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("EntryId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entry_id");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer")
                        .HasColumnName("entry_type");

                    b.Property<Guid>("Subject")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("subject")
                        .IsFixedLength();

                    b.Property<string>("FileShareOptions")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<Guid>("Owner")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("owner")
                        .IsFixedLength();

                    b.Property<int>("Share")
                        .HasColumnType("integer")
                        .HasColumnName("security");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer")
                        .HasColumnName("subject_type");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("TenantId", "EntryId", "EntryType", "Subject")
                        .HasName("files_security_pkey");

                    b.HasIndex("Owner")
                        .HasDatabaseName("owner");

                    b.HasIndex("EntryId", "TenantId", "EntryType", "Owner")
                        .HasDatabaseName("tenant_id_files_security");

                    b.ToTable("files_security", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("Owner")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("flag");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Owner", "Name", "Type")
                        .HasDatabaseName("name_files_tag");

                    b.ToTable("files_tag", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTagLink", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer")
                        .HasColumnName("entry_type");

                    b.Property<string>("EntryId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("entry_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("tag_count");

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("create_by")
                        .HasDefaultValueSql("NULL::bpchar")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on");

                    b.HasKey("TenantId", "TagId", "EntryType", "EntryId")
                        .HasName("files_tag_link_pkey");

                    b.HasIndex("CreateOn")
                        .HasDatabaseName("create_on_files_tag_link");

                    b.HasIndex("TenantId", "EntryType", "EntryId")
                        .HasDatabaseName("entry_id");

                    b.ToTable("files_tag_link", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on");

                    b.Property<string>("FolderId")
                        .HasColumnType("text")
                        .HasColumnName("folder_id");

                    b.Property<int>("FolderType")
                        .HasColumnType("integer")
                        .HasColumnName("folder_type");

                    b.Property<bool>("HasLogo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_logo");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("provider")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer")
                        .HasColumnName("room_type");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("customer_title");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_id");

                    b.ToTable("files_thirdparty_account", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyApp", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("App")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("app");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("UserId", "App")
                        .HasName("files_thirdparty_app_pkey");

                    b.HasIndex("TenantId");

                    b.ToTable("files_thirdparty_app", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyIdMapping", b =>
                {
                    b.Property<string>("HashId")
                        .HasMaxLength(32)
                        .HasColumnType("character(32)")
                        .HasColumnName("hash_id")
                        .IsFixedLength();

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.HasKey("HashId")
                        .HasName("files_thirdparty_id_mapping_pkey");

                    b.HasIndex("TenantId", "HashId")
                        .HasDatabaseName("index_1");

                    b.ToTable("files_thirdparty_id_mapping", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("create_by")
                        .IsFixedLength();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_on");

                    b.Property<int>("FilesCount")
                        .HasColumnType("integer")
                        .HasColumnName("filesCount");

                    b.Property<int>("FolderType")
                        .HasColumnType("integer")
                        .HasColumnName("folder_type");

                    b.Property<int>("FoldersCount")
                        .HasColumnType("integer")
                        .HasColumnName("foldersCount");

                    b.Property<bool>("HasLogo")
                        .HasColumnType("boolean")
                        .HasColumnName("has_logo");

                    b.Property<Guid>("ModifiedBy")
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by")
                        .IsFixedLength();

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedOn")
                        .HasDatabaseName("modified_on_files_folder");

                    b.HasIndex("TenantId", "ParentId")
                        .HasDatabaseName("parent_id");

                    b.ToTable("files_folder", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFolderTree", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer")
                        .HasColumnName("folder_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.HasKey("ParentId", "FolderId")
                        .HasName("files_folder_tree_pkey");

                    b.HasIndex("FolderId")
                        .HasDatabaseName("folder_id_files_folder_tree");

                    b.ToTable("files_folder_tree", "onlyoffice");
                });

            modelBuilder.Entity("ASC.MessagingSystem.EF.Model.AuditEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<string>("Browser")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("browser")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DescriptionRaw")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Initiator")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("initiator")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Page")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("page")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Platform")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("platform")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("NULL")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Date")
                        .HasDatabaseName("date");

                    b.ToTable("audit_events", "onlyoffice");
                });

            modelBuilder.Entity("ASC.MessagingSystem.EF.Model.LoginEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Browser")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("browser")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DescriptionRaw")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("login")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Page")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("page")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Platform")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("platform")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("date_login_events");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "TenantId")
                        .HasDatabaseName("tenant_id_login_events");

                    b.ToTable("login_events", "onlyoffice");
                });

            modelBuilder.Entity("ASC.Webhooks.Core.EF.Model.DbWebhook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Method")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("method")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Route")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("route")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("webhooks", (string)null);
                });

            modelBuilder.Entity("ASC.Webhooks.Core.EF.Model.WebhooksConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool>("SSL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("ssl")
                        .HasDefaultValueSql("true");

                    b.Property<string>("SecretKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("secret_key")
                        .HasDefaultValueSql("''");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Uri")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("uri")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_id");

                    b.ToTable("webhooks_config", (string)null);
                });

            modelBuilder.Entity("ASC.Webhooks.Core.EF.Model.WebhooksLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_time");

                    b.Property<DateTime?>("Delivery")
                        .HasColumnType("datetime")
                        .HasColumnName("delivery");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("json")
                        .HasColumnName("request_headers");

                    b.Property<string>("RequestPayload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_payload");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("json")
                        .HasColumnName("response_headers");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text")
                        .HasColumnName("response_payload");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("uid");

                    b.Property<int>("WebhookId")
                        .HasColumnType("int")
                        .HasColumnName("webhook_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ConfigId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("tenant_id");

                    b.ToTable("webhooks_logs", (string)null);
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Acl", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbGroup", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbQuotaRow", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbSubscriptionMethod", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbTariff", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.DbTariffRow", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.FireBaseUser", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbCoreSettings", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbWebstudioSettings", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbWebstudioUserVisit", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.NotifyQueue", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.TelegramUser", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.TenantIpRestrictions", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Subscription", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.User", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserDav", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserGroup", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserPhoto", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserSecurity", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Data.Backup.EF.Model.BackupRecord", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Data.Backup.EF.Model.BackupSchedule", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("ASC.Data.Backup.EF.Model.BackupSchedule", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.EventBus.Extensions.Logger.IntegrationEventLogEntry", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedAggregate", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedReaded", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Feed.Model.FeedUsers", b =>
                {
                    b.HasOne("ASC.Feed.Model.FeedAggregate", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFile", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesBunchObjects", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesLink", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesProperties", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesSecurity", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTag", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTagLink", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyAccount", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyApp", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesThirdpartyIdMapping", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFolder", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFolderTree", b =>
                {
                    b.HasOne("ASC.Files.Core.EF.DbFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("ASC.MessagingSystem.EF.Model.AuditEvent", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.MessagingSystem.EF.Model.LoginEvent", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Webhooks.Core.EF.Model.WebhooksConfig", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ASC.Webhooks.Core.EF.Model.WebhooksLog", b =>
                {
                    b.HasOne("ASC.Webhooks.Core.EF.Model.WebhooksConfig", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Tenant");
                });
#pragma warning restore 612, 618
        }
    }
}
