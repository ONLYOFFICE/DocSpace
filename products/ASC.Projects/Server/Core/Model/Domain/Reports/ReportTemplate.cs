/*
 *
 * (c) Copyright Ascensio System Limited 2010-2021
 *
 * This program is freeware. You can redistribute it and/or modify it under the terms of the GNU 
 * General Public License (GPL) version 3 as published by the Free Software Foundation (https://www.gnu.org/copyleft/gpl.html). 
 * In accordance with Section 7(a) of the GNU GPL its Section 15 shall be amended to the effect that 
 * Ascensio System SIA expressly excludes the warranty of non-infringement of any third-party rights.
 *
 * THIS PROGRAM IS DISTRIBUTED WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE. For more details, see GNU GPL at https://www.gnu.org/copyleft/gpl.html
 *
 * You can contact Ascensio System SIA by email at sales@onlyoffice.com
 *
 * The interactive user interfaces in modified source and object code versions of ONLYOFFICE must display 
 * Appropriate Legal Notices, as required under Section 5 of the GNU GPL version 3.
 *
 * Pursuant to Section 7 § 3(b) of the GNU GPL you must retain the original ONLYOFFICE logo which contains 
 * relevant author attributions when distributing the software. If the display of the logo in its graphic 
 * form is not reasonably feasible for technical reasons, you must include the words "Powered by ONLYOFFICE" 
 * in every copy of the program you distribute. 
 * Pursuant to Section 7 § 3(e) we decline to grant you any rights under trademark law for use of our trademarks.
 *
*/

using System;
using System.IO;

using ASC.Common;
using ASC.Core.Common.Settings;
using ASC.Projects.Engine;
using ASC.Web.Files.Classes;
using ASC.Web.Files.Services.DocumentService;
using ASC.Web.Files.Utils;

namespace ASC.Projects.Core.Domain.Reports
{
    public class ReportTemplate
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public ReportType ReportType { get; set; }
        public TaskFilter Filter { get; set; }
        public string Cron { get; set; }
        public Guid CreateBy { get; set; }
        public DateTime CreateOn { get; set; }
        public bool AutoGenerated { get; set; }
        public int Tenant { get; set; }

        public override string ToString()
        {
            return Name;
        }

        public override bool Equals(object obj)
        {
            var t = obj as ReportTemplate;
            return t != null && Id.Equals(t.Id);
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }

    [Scope]
    public class ReportTemplateHelper { 
        private SettingsManager SettingsManager { get; set; }
        private FileUploader FileUploader { get; set; }
        private GlobalFolderHelper GlobalFolderHelper { get; set; }
        private ReportTemplate ReportTemplate { get; set; }
        private EngineFactory EngineFactory { get; set; }

        public ReportTemplateHelper(SettingsManager settingsManager, FileUploader fileUploader, GlobalFolderHelper globalFolderHelper, EngineFactory engineFactory)
        {
            SettingsManager = settingsManager;
            FileUploader = fileUploader;
            GlobalFolderHelper = globalFolderHelper;
            EngineFactory = engineFactory;
        }
        public ReportTemplate GetReportTemplate(ReportType reportType)
        {
            if (ReportTemplate == null) 
            { 
                ReportTemplate = new ReportTemplate();
                ReportTemplate.ReportType = reportType;
                ReportTemplate.AutoGenerated = false;
                return ReportTemplate;
            }
            else
            {
                return ReportTemplate;
            }
        }

        internal void SaveDocbuilderReport(ReportState state, string url)
        {
            if (ReportTemplate == null) throw new NullReferenceException();
            var data = new System.Net.WebClient().DownloadData(url);

            using (var memStream = new MemoryStream(data))
            {
                Action<Stream> action = stream =>
                {
                    var file = FileUploader.Exec(SettingsManager.Load<ProjectsCommonSettings>().FolderId, state.FileName, stream.Length, stream, true);
                    state.FileId = (int)file.ID;
                };

                try
                {
                    action(memStream);
                }
                catch (DirectoryNotFoundException)
                {
                    var settings = SettingsManager.LoadForCurrentUser<ProjectsCommonSettings>();
                    settings.FolderId = GlobalFolderHelper.FolderMy;
                    SettingsManager.SaveForCurrentUser(settings);

                    action(memStream);
                }
            }

            EngineFactory.GetReportEngine().Save(new ReportFile
            {
                FileId = state.FileId,
                Name = ReportTemplate.Name,
                ReportType = ReportTemplate.ReportType
            });
        }

        internal void SaveDocbuilderReport(ReportState state, string url, ReportTemplate report)
        {
            var data = new System.Net.WebClient().DownloadData(url);

            using (var memStream = new MemoryStream(data))
            {
                Action<Stream> action = stream =>
                {
                    var file = FileUploader.Exec(SettingsManager.Load<ProjectsCommonSettings>().FolderId, state.FileName, stream.Length, stream, true);
                    state.FileId = (int)file.ID;
                };

                try
                {
                    action(memStream);
                }
                catch (DirectoryNotFoundException)
                {
                    var settings = SettingsManager.LoadForCurrentUser<ProjectsCommonSettings>();
                    settings.FolderId = GlobalFolderHelper.FolderMy;
                    SettingsManager.SaveForCurrentUser(settings);

                    action(memStream);
                }
            }

            EngineFactory.GetReportEngine().Save(new ReportFile
            {
                FileId = state.FileId,
                Name = report.Name,
                ReportType = report.ReportType
            });
        }
    }
}
