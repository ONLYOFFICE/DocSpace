// <auto-generated />
using System;
using ASC.Files.Core.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASC.Core.Common.Migrations
{
    [DbContext(typeof(Files.Core.EF.FilesDbContext))]
    [Migration("20210804110106_TestFilesMigration")]
    partial class TestFilesMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("ASC.Files.Core.EF.DbFolder", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                b.Property<string>("CreateBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("create_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<DateTime>("CreateOn")
                    .HasColumnType("datetime")
                    .HasColumnName("create_on");

                b.Property<int>("FilesCount")
                    .HasColumnType("int")
                    .HasColumnName("filesCount");

                b.Property<int>("FolderType")
                    .HasColumnType("int")
                    .HasColumnName("folder_type");

                b.Property<int>("FoldersCount")
                    .HasColumnType("int")
                    .HasColumnName("foldersCount");

                b.Property<string>("ModifiedBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("modified_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<DateTime>("ModifiedOn")
                    .HasColumnType("datetime")
                    .HasColumnName("modified_on");

                b.Property<int>("ParentId")
                    .HasColumnType("int")
                    .HasColumnName("parent_id");

                b.Property<int>("TenantId")
                    .HasColumnType("int")
                    .HasColumnName("tenant_id");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("varchar(400)")
                    .HasColumnName("title")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.HasKey("Id");

                b.HasIndex("ModifiedOn")
                    .HasDatabaseName("modified_on");

                b.HasIndex("TenantId", "ParentId")
                    .HasDatabaseName("parent_id");

                b.ToTable("files_folder");
            });

        modelBuilder.Entity("ASC.Files.Core.EF.DbFolderTree", b =>
            {
                b.Property<int>("ParentId")
                    .HasColumnType("int")
                    .HasColumnName("parent_id");

                b.Property<int>("FolderId")
                    .HasColumnType("int")
                    .HasColumnName("folder_id");

                b.Property<int>("Level")
                    .HasColumnType("int")
                    .HasColumnName("level");

                b.HasKey("ParentId", "FolderId")
                    .HasName("PRIMARY");

                b.HasIndex("FolderId")
                    .HasDatabaseName("folder_id");

                b.ToTable("files_folder_tree");
            });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesBunchObjects", b =>
            {
                b.Property<int>("TenantId")
                    .HasColumnType("int")
                    .HasColumnName("tenant_id");

                b.Property<string>("RightNode")
                    .HasColumnType("varchar(255)")
                    .HasColumnName("right_node")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("LeftNode")
                    .IsRequired()
                    .HasColumnType("varchar(255)")
                    .HasColumnName("left_node")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.HasKey("TenantId", "RightNode")
                    .HasName("PRIMARY");

                b.HasIndex("LeftNode")
                    .HasDatabaseName("left_node");

                b.ToTable("files_bunch_objects");
            });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFile", b =>
            {
                b.Property<int>("TenantId")
                    .HasColumnType("int")
                    .HasColumnName("tenant_id");

                b.Property<int>("Id")
                    .HasColumnType("int")
                    .HasColumnName("id");

                b.Property<int>("Version")
                    .HasColumnType("int")
                    .HasColumnName("version");

                b.Property<int>("Category")
                    .HasColumnType("int")
                    .HasColumnName("category");

                b.Property<string>("Changes")
                    .HasColumnType("mediumtext")
                    .HasColumnName("changes")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("Comment")
                    .HasColumnType("varchar(255)")
                    .HasColumnName("comment")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<long>("ContentLength")
                    .HasColumnType("bigint")
                    .HasColumnName("content_length");

                b.Property<string>("ConvertedType")
                    .HasColumnType("varchar(10)")
                    .HasColumnName("converted_type")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("CreateBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("create_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<DateTime>("CreateOn")
                    .HasColumnType("datetime")
                    .HasColumnName("create_on");

                b.Property<bool>("CurrentVersion")
                    .HasColumnType("tinyint(1)")
                    .HasColumnName("current_version");

                b.Property<bool>("Encrypted")
                    .HasColumnType("tinyint(1)")
                    .HasColumnName("encrypted");

                b.Property<int>("FileStatus")
                    .HasColumnType("int")
                    .HasColumnName("file_status");

                b.Property<int>("FolderId")
                    .HasColumnType("int")
                    .HasColumnName("folder_id");

                b.Property<int>("Forcesave")
                    .HasColumnType("int")
                    .HasColumnName("forcesave");

                b.Property<string>("ModifiedBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("modified_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<DateTime>("ModifiedOn")
                    .HasColumnType("datetime")
                    .HasColumnName("modified_on");

                b.Property<int>("Thumb")
                    .HasColumnType("int")
                    .HasColumnName("thumb");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("varchar(400)")
                    .HasColumnName("title")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<int>("VersionGroup")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("version_group")
                    .HasDefaultValueSql("'1'");

                b.HasKey("TenantId", "Id", "Version")
                    .HasName("PRIMARY");

                b.HasIndex("FolderId")
                    .HasDatabaseName("folder_id");

                b.HasIndex("Id")
                    .HasDatabaseName("id");

                b.HasIndex("ModifiedOn")
                    .HasDatabaseName("modified_on");

                b.ToTable("files_file");
            });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesSecurity", b =>
            {
                b.Property<int>("TenantId")
                    .HasColumnType("int")
                    .HasColumnName("tenant_id");

                b.Property<string>("EntryId")
                    .HasColumnType("varchar(50)")
                    .HasColumnName("entry_id")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<int>("EntryType")
                    .HasColumnType("int")
                    .HasColumnName("entry_type");

                b.Property<string>("Subject")
                    .HasColumnType("char(38)")
                    .HasColumnName("subject")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("Owner")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("owner")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<int>("Security")
                    .HasColumnType("int")
                    .HasColumnName("security");

                b.Property<DateTime>("TimeStamp")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("timestamp")
                    .HasColumnName("timestamp")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                b.HasKey("TenantId", "EntryId", "EntryType", "Subject")
                    .HasName("PRIMARY");

                b.HasIndex("Owner")
                    .HasDatabaseName("owner");

                b.HasIndex("TenantId", "EntryType", "EntryId", "Owner")
                    .HasDatabaseName("tenant_id");

                b.ToTable("files_security");
            });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTag", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("int")
                    .HasColumnName("id");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("char(255)")
                    .HasColumnName("name")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("Owner")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("owner")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<int>("Type")
                   .HasColumnType("int")
                   .HasColumnName("flag");

                b.Property<int>("TenantId")
                   .HasColumnType("int")
                   .HasColumnName("tenant_id");

                b.ToTable("files_tag");
            });

            modelBuilder.Entity("ASC.Files.Core.EF.DbFilesTagLink", b =>
            {
                b.Property<int>("TenantId")
                    .HasColumnType("int")
                    .HasColumnName("tenant_id");

                b.Property<int>("TagId")
                    .HasColumnType("int")
                    .HasColumnName("tag_id");

                b.Property<int>("EntryType")
                    .HasColumnType("int")
                    .HasColumnName("entry_type");

                b.Property<string>("EntryId")
                   .IsRequired()
                   .HasColumnType("varchar(32)")
                   .HasColumnName("entry_id")
                   .UseCollation("utf8_general_ci")
                   .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("CreateBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("create_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<string>("CreateBy")
                    .IsRequired()
                    .HasColumnType("char(38)")
                    .HasColumnName("create_by")
                    .UseCollation("utf8_general_ci")
                    .HasAnnotation("MySql:CharSet", "utf8");

                b.Property<DateTime>("CreateOn")
                    .HasColumnType("datetime")
                    .HasColumnName("create_on");

                b.Property<int>("Count")
                    .HasColumnType("int")
                    .HasColumnName("tag_count");

                b.ToTable("files_tag_link");
            });
#pragma warning restore 612, 618
        }
    }
}
