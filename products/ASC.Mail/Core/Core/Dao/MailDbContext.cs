// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ASC.Common;
using ASC.Core.Common.EF;
using ASC.Mail.Core.Dao.Entities;
using Microsoft.EntityFrameworkCore;
using ASC.Core.Common.EF.Model;

using DbTenant = ASC.Core.Common.EF.Model.DbTenant;
using CrmContact = ASC.Mail.Core.Dao.Entities.CrmContact;
using System.Collections.Generic;
using System;

namespace ASC.Mail.Core.Dao
{
    public partial class MailDbContext : BaseDbContext
    {
        public MailDbContext() { }

        public MailDbContext(DbContextOptions<MailDbContext> options) : base(options) { }

        public class MySqlMailDbContext : MailDbContext { }
        public class PostgreSqlMailDbContext : MailDbContext { }

        public virtual DbSet<MailAlert> MailAlerts { get; set; }
        public virtual DbSet<MailAttachment> MailAttachment { get; set; }
        public virtual DbSet<MailChain> MailChain { get; set; }
        public virtual DbSet<MailChainXCrmEntity> MailChainXCrmEntity { get; set; }
        public virtual DbSet<MailContactInfo> MailContactInfo { get; set; }
        public virtual DbSet<MailContact> MailContacts { get; set; }
        public virtual DbSet<MailDisplayImages> MailDisplayImages { get; set; }
        public virtual DbSet<MailFilter> MailFilter { get; set; }
        public virtual DbSet<MailFolder> MailFolder { get; set; }
        public virtual DbSet<MailFolderCounters> MailFolderCounters { get; set; }
        public virtual DbSet<MailImapFlags> MailImapFlags { get; set; }
        public virtual DbSet<MailImapSpecialMailbox> MailImapSpecialMailbox { get; set; }
        public virtual DbSet<MailMail> MailMail { get; set; }
        public virtual DbSet<MailMailbox> MailMailbox { get; set; }
        public virtual DbSet<MailMailboxAutoreply> MailMailboxAutoreply { get; set; }
        public virtual DbSet<MailMailboxAutoreplyHistory> MailMailboxAutoreplyHistory { get; set; }
        public virtual DbSet<MailMailboxDomain> MailMailboxDomain { get; set; }
        public virtual DbSet<MailMailboxProvider> MailMailboxProvider { get; set; }
        public virtual DbSet<MailMailboxServer> MailMailboxServer { get; set; }
        public virtual DbSet<MailMailboxSignature> MailMailboxSignature { get; set; }
        public virtual DbSet<MailPopUnorderedDomain> MailPopUnorderedDomain { get; set; }
        public virtual DbSet<MailServerAddress> MailServerAddress { get; set; }
        public virtual DbSet<MailServerDns> MailServerDns { get; set; }
        public virtual DbSet<MailServerDomain> MailServerDomain { get; set; }
        public virtual DbSet<MailServerMailGroup> MailServerMailGroup { get; set; }
        public virtual DbSet<MailServerMailGroupXMailServerAddress> MailServerMailGroupXMailServerAddress { get; set; }
        public virtual DbSet<MailServerServer> MailServerServer { get; set; }
        public virtual DbSet<MailServerServerType> MailServerServerType { get; set; }
        public virtual DbSet<MailServerServerXTenant> MailServerServerXTenant { get; set; }
        public virtual DbSet<MailTag> MailTag { get; set; }
        public virtual DbSet<CrmTag> CrmTag { get; set; }
        public virtual DbSet<CrmEntityTag> CrmEntityTag { get; set; }
        public virtual DbSet<MailTagAddresses> MailTagAddresses { get; set; }
        public virtual DbSet<MailTagMail> MailTagMail { get; set; }
        public virtual DbSet<MailUserFolder> MailUserFolder { get; set; }
        public virtual DbSet<MailUserFolderTree> MailUserFolderTree { get; set; }
        public virtual DbSet<MailUserFolderXMail> MailUserFolderXMail { get; set; }
        public virtual DbSet<CrmContact> CrmContact { get; set; }
        public virtual DbSet<CrmContactInfo> CrmContactInfo { get; set; }
        public virtual DbSet<DbTenant> Tenants { get; set; }

        protected override Dictionary<Provider, Func<BaseDbContext>> ProviderContext
        {
            get
            {
                return new Dictionary<Provider, Func<BaseDbContext>>()
                {
                    { Provider.MySql, () => new MySqlMailDbContext() } ,
                    { Provider.PostgreSql, () => new PostgreSqlMailDbContext() } ,
                };
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            ModelBuilderWrapper.From(modelBuilder, Provider)
                .AddDbTenant();

            modelBuilder.AddMailAlert();
            modelBuilder.AddMailAttachment();
            modelBuilder.AddMailChain();
            modelBuilder.AddMailChainXCrmEntity();
            modelBuilder.AddMailContactInfo();
            modelBuilder.AddMailContact();
            modelBuilder.AddMailDisplayImages();
            modelBuilder.AddMailFilter();
            modelBuilder.AddMailFolder();
            modelBuilder.AddMailFolderCounters();
            modelBuilder.AddMailImapFlags();
            modelBuilder.AddMailImapSpecialMailbox();
            modelBuilder.AddMailMail();
            modelBuilder.AddMailMailbox();
            modelBuilder.AddMailMailboxAutoreply();
            modelBuilder.AddMailMailboxAutoreplyHistory();
            modelBuilder.AddMailMailboxDomain();
            modelBuilder.AddMailMailboxProvider();
            modelBuilder.AddMailMailboxServer();
            modelBuilder.AddMailMailboxSignature();
            modelBuilder.AddMailPopUnorderedDomain();
            modelBuilder.AddMailServerAddress();
            modelBuilder.AddMailServerDns();
            modelBuilder.AddMailServerDomain();
            modelBuilder.AddMailServerMailGroup();
            modelBuilder.AddMailServerMailGroupXMailServerAddress();
            modelBuilder.AddMailServerServer();
            modelBuilder.AddMailServerServerType();
            modelBuilder.AddMailServerServerXTenant();
            modelBuilder.AddMailTag();
            modelBuilder.AddCrmTag();
            modelBuilder.AddCrmEntityTag();
            modelBuilder.AddMailTagAddresses();
            modelBuilder.AddMailTagMail();
            modelBuilder.AddMailUserFolder();
            modelBuilder.AddMailUserFolderTree();
            modelBuilder.AddMailUserFolderXMail();
            modelBuilder.AddCrmContact();
            modelBuilder.AddCrmContactInfo();

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }

    public static class MailDbExtension
    {
        public static DIHelper AddMailDbContextService(this DIHelper services)
        {
            return services.AddDbContextManagerService<MailDbContext>();
        }
    }
}