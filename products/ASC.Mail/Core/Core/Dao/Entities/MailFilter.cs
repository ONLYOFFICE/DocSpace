// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ASC.Core.Common.EF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ASC.Mail.Core.Dao.Entities
{
    [Table("mail_filter")]
    public partial class MailFilter : BaseEntity
    {
        [Key]
        [Column("id", TypeName = "int(11)")]
        public int Id { get; set; }
        [Column("tenant", TypeName = "int(11)")]
        public int Tenant { get; set; }
        [Required]
        [Column("id_user", TypeName = "varchar(38)")]
        public string IdUser { get; set; }
        [Required]
        [Column("enabled")]
        public bool? Enabled { get; set; }
        [Required]
        [Column("filter", TypeName = "text")]
        public string Filter { get; set; }
        [Column("position", TypeName = "int(11)")]
        public int Position { get; set; }
        [Column("date_created", TypeName = "timestamp")]
        public DateTime? DateCreated { get; set; }
        [Column("date_modified", TypeName = "timestamp")]
        public DateTime DateModified { get; set; }

        public override object[] GetKeys()
        {
            return new object[] { Id };
        }
    }

    public static class MailFilterExtension
    {
        public static ModelBuilder AddMailFilter(this ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MailFilter>(entity =>
            {
                entity.HasIndex(e => new { e.Tenant, e.IdUser })
                    .HasDatabaseName("tenant_id_user");

                entity.Property(e => e.DateModified)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Enabled).HasDefaultValueSql("'1'");

                entity.Property(e => e.Filter)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.IdUser)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            return modelBuilder;
        }
    }
}