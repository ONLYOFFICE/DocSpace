// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ASC.Core.Common.EF;
using ASC.ElasticSearch;
using ASC.ElasticSearch.Core;

using Microsoft.EntityFrameworkCore;
using Nest;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq.Expressions;

namespace ASC.Mail.Core.Dao.Entities
{
    [ElasticsearchType(RelationName = Tables.Tag)]
    [Table("mail_tag")]
    public partial class MailTag : BaseEntity, ISearchItem
    {
        [Key]
        [Column("id", TypeName = "int(11)")]
        public int Id { get; set; }
        [Column("tenant", TypeName = "int(11)")]
        public int TenantId { get; set; }
        [Required]
        [Column("id_user", TypeName = "varchar(255)")]
        public string IdUser { get; set; }
        [Required]
        [Column("name", TypeName = "varchar(255)")]
        public string Name { get; set; }
        [Column("style", TypeName = "varchar(20)")]
        public string Style { get; set; }
        [Required]
        [Column("addresses", TypeName = "text")]
        public string Addresses { get; set; }
        [Column("count", TypeName = "int(10)")]
        public int Count { get; set; }
        [Column("crm_id", TypeName = "int(10)")]
        public int CrmId { get; set; }

        [NotMapped]
        [Ignore]
        public string IndexName
        {
            get => Tables.Tag;
        }

        public Expression<Func<ISearchItem, object[]>> SearchContentFields
        {
            get => (a) => new[] { Name, Addresses };
        }

        public override object[] GetKeys()
        {
            return new object[] { Id };
        }

        public Expression<Func<ISearchItem, object[]>> GetSearchContentFields(SearchSettingsHelper searchSettings)
        {
            throw new NotImplementedException();
        }
    }

    public static class MailTagExtension
    {
        public static ModelBuilder AddMailTag(this ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MailTag>(entity =>
            {
                entity.HasIndex(e => new { e.TenantId, e.IdUser })
                    .HasDatabaseName("username");

                entity.Property(e => e.Addresses)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.IdUser)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Style)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            return modelBuilder;
        }
    }
}