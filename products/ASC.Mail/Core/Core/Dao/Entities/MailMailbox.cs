// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Microsoft.EntityFrameworkCore;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ASC.Mail.Core.Dao.Entities
{
    [Table("mail_mailbox")]
    public partial class MailMailbox
    {
        [Key]
        [Column("id", TypeName = "int(11) unsigned")]
        public uint Id { get; set; }
        [Column("tenant", TypeName = "int(11)")]
        public int Tenant { get; set; }
        [Required]
        [Column("id_user", TypeName = "varchar(38)")]
        public string IdUser { get; set; }
        [Required]
        [Column("address", TypeName = "varchar(255)")]
        public string Address { get; set; }
        [Column("name", TypeName = "varchar(255)")]
        public string Name { get; set; }
        [Column("enabled", TypeName = "tinyint(1) unsigned")]
        public bool Enabled { get; set; }
        [Column("is_removed", TypeName = "tinyint(1) unsigned")]
        public bool IsRemoved { get; set; }
        [Column("is_processed", TypeName = "tinyint(1) unsigned")]
        public bool IsProcessed { get; set; }
        [Column("is_server_mailbox", TypeName = "tinyint(1) unsigned")]
        public bool IsServerMailbox { get; set; }
        [Column("imap", TypeName = "tinyint(1) unsigned")]
        public bool Imap { get; set; }
        [Column("user_online", TypeName = "tinyint(1) unsigned")]
        public bool UserOnline { get; set; }
        [Column("is_default", TypeName = "tinyint(1) unsigned")]
        public bool IsDefault { get; set; }
        [Column("msg_count_last", TypeName = "int(11)")]
        public int MsgCountLast { get; set; }
        [Column("size_last", TypeName = "int(11)")]
        public long SizeLast { get; set; }
        [Column("login_delay", TypeName = "int(11) unsigned")]
        public int LoginDelay { get; set; }
        [Column("quota_error")]
        public bool QuotaError { get; set; }
        [Column("imap_intervals", TypeName = "mediumtext")]
        public string ImapIntervals { get; set; }
        [Column("begin_date", TypeName = "timestamp")]
        public DateTime BeginDate { get; set; }
        [Column("email_in_folder", TypeName = "text")]
        public string EmailInFolder { get; set; }
        [Column("pop3_password", TypeName = "varchar(255)")]
        public string Pop3Password { get; set; }
        [Column("smtp_password", TypeName = "varchar(255)")]
        public string SmtpPassword { get; set; }
        [Column("token_type", TypeName = "tinyint(4)")]
        public int TokenType { get; set; }
        [Column("token", TypeName = "text")]
        public string Token { get; set; }
        [Column("id_smtp_server", TypeName = "int(11)")]
        public int IdSmtpServer { get; set; }
        [Column("id_in_server", TypeName = "int(11)")]
        public int IdInServer { get; set; }
        [Column("date_checked", TypeName = "datetime")]
        public DateTime? DateChecked { get; set; }
        [Column("date_user_checked", TypeName = "datetime")]
        public DateTime? DateUserChecked { get; set; }
        [Column("date_login_delay_expires", TypeName = "datetime")]
        public DateTime DateLoginDelayExpires { get; set; }
        [Column("date_auth_error", TypeName = "datetime")]
        public DateTime? DateAuthError { get; set; }
        [Column("date_created", TypeName = "datetime")]
        public DateTime? DateCreated { get; set; }
        [Column("date_modified", TypeName = "timestamp")]
        public DateTime DateModified { get; set; }
    }

    public static class MailMailboxExtension
    {
        public static ModelBuilder AddMailMailbox(this ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MailMailbox>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd();

                entity.HasIndex(e => e.Address)
                    .HasDatabaseName("address_index");

                entity.HasIndex(e => e.IdInServer)
                    .HasDatabaseName("main_mailbox_id_in_server_mail_mailbox_server_id");

                entity.HasIndex(e => e.IdSmtpServer)
                    .HasDatabaseName("main_mailbox_id_smtp_server_mail_mailbox_server_id");

                entity.HasIndex(e => new { e.DateChecked, e.DateLoginDelayExpires })
                    .HasDatabaseName("date_login_delay_expires");

                entity.HasIndex(e => new { e.Tenant, e.IdUser })
                    .HasDatabaseName("user_id_index");

                entity.Property(e => e.Address)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.BeginDate).HasDefaultValueSql("'1975-01-01 00:00:00'");

                entity.Property(e => e.DateLoginDelayExpires).HasDefaultValueSql("'1975-01-01 00:00:00'");

                entity.Property(e => e.DateModified)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.EmailInFolder)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Enabled).HasDefaultValueSql("'1'");

                entity.Property(e => e.IdUser)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.ImapIntervals)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.LoginDelay).HasDefaultValueSql("'30'");

                entity.Property(e => e.Name)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Pop3Password)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.SmtpPassword)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Token)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            return modelBuilder;
        }
    }

    public class MailMailboxNames
    {
        public const string DateChecked = "date_checked";
        public const string DateLoginDelayExpires = "date_login_delay_expires";
        public const string DateUserChecked = "date_user_checked";
    }
}