name: 4testing multiarch-build

on:
  pull_request:
    branches: 
      - master
    types:
      - closed

env:
    DOCKER_PATH: "/build/install/docker"
    REPO: "lemmav"
    DOCKER_IMAGE_PREFIX: "4testing-docspace"
    DOCKERFILE: "Dockerfile.app"
    FILE: "build.yml"
    STATUS: ""


jobs:
  
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build 4testing
        run: |
          cd .${DOCKER_PATH}

          echo "export DOCKER_TAG"
          export DOCKER_TAG=$(echo "${GITHUB_REF_NAME}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/v1.2.0/v1.1.0/')

          # export DOCKER_VERSION_TAG=$(echo "${GITHUB_REF_NAME}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/:v/:/g')

          echo "Started DOCKER_IMAGES"
          DOCKER_IMAGES=$(grep -oP '(?<=image: ")[^"]+' $FILE | sed -e "s/\${REPO}/$REPO/g ;  s/\${DOCKER_IMAGE_PREFIX}/$DOCKER_IMAGE_PREFIX/g ; s/\${DOCKER_TAG}/$DOCKER_TAG/g" |  tr '\n' ' ' )
          echo "Finished DOCKER_IMAGES"

          echo "DOCKER_IMAGES=$DOCKER_IMAGES"
          IFS=" " read -a IMAGES <<< "$DOCKER_IMAGES"
          for IMAGE in ${IMAGES[@]}; do
            docker pull "$IMAGE"
            LATEST_IMAGE=$(echo $IMAGE | sed -E -e "s/$DOCKER_IMAGE_PREFIX-//g; s/:.+/:latest/g" )
            VERSION_IMAGE=$(echo $IMAGE | sed -E -e  "s/$DOCKER_IMAGE_PREFIX-//g; s/:v/:/g" )
            echo "docker tag for taggig"

            echo "IMAGE = $IMAGE"
            echo "LATEST_IMAGE = $LATEST_IMAGE"
            docker tag "$IMAGE" "$LATEST_IMAGE"

            echo "docker push for taggig"
            docker push "$LATEST_IMAGE"
            echo "VERSION_IMAGE = $VERSION_IMAGE"
            docker tag "$IMAGE" "$VERSION_IMAGE"

            echo "docker push for taggig"
            docker push "$VERSION_IMAGE"
          done
        shell: bash
