import { translations } from "../../autoGeneratedTranslations";
import pkg from "../../../package.json";
import { thirdPartyLogin } from "@docspace/common/utils/loginUtils";
import { MessageKey } from "./constants";

export function getLanguage(lng: string) {
  try {
    let language = lng == "en-US" || lng == "en-GB" ? "en" : lng;

    const splitted = lng.split("-");

    if (splitted.length == 2 && splitted[0] == splitted[1].toLowerCase()) {
      language = splitted[0];
    }

    return language;
  } catch (error) {
    console.error(error);
  }

  return lng;
}

export function loadLanguagePath(homepage: string, fixedNS = null) {
  return (lng: string | [string], ns: string) => {
    const language = getLanguage(lng instanceof Array ? lng[0] : lng);

    const lngCollection = translations.get(language);

    const path = lngCollection?.get(`${fixedNS || ns}`);

    if (!path) return `/login/locales/${language}/${fixedNS || ns}.json`;

    const isCommonPath = path?.indexOf("Common") > -1;
    const isClientPath = !isCommonPath && path?.indexOf("Login") === -1;

    if (ns.length > 0 && ns[0] === "Common" && isCommonPath) {
      return path.replace("/login/", "/static/");
    }

    if (ns.length > 0 && ns[0] != "Login" && isClientPath) {
      return path.replace("/login/", "/");
    }

    return path;
  };
}

export function initI18n(initialI18nStoreASC: IInitialI18nStoreASC): void {
  if (!initialI18nStoreASC || window.i18n) return;

  const i18n = {
    inLoad: [],
    loaded: {},
  };
  window.i18n = i18n;

  for (let lng in initialI18nStoreASC) {
    const collection = translations.get(lng);

    for (let ns in initialI18nStoreASC[lng]) {
      const path = collection?.get(ns);

      if (!path) {
        window.i18n.loaded[`/login/locales/${lng}/${ns}.json`] = {
          namespaces: ns,
          data: initialI18nStoreASC[lng][ns],
        };
      } else {
        if (ns === "Common") {
          window.i18n.loaded[`${path?.replace("/login/", "/static/")}`] = {
            namespaces: ns,
            data: initialI18nStoreASC[lng][ns],
          };
        } else if (ns != "Login") {
          window.i18n.loaded[`${path?.replace("/login/", "/")}`] = {
            namespaces: ns,
            data: initialI18nStoreASC[lng][ns],
          };
        } else {
          window.i18n.loaded[`${path}`] = {
            namespaces: ns,
            data: initialI18nStoreASC[lng][ns],
          };
        }
      }
    }
  }
}

export async function oAuthLogin(profile: string) {
  let isSuccess = false;
  try {
    await thirdPartyLogin(profile);
    isSuccess = true;
    const redirectPath = localStorage.getItem("redirectPath");

    if (redirectPath) {
      localStorage.removeItem("redirectPath");
      window.location.href = redirectPath;
    }
  } catch (e) {
    isSuccess = false;
    return isSuccess;
  }

  localStorage.removeItem("profile");
  localStorage.removeItem("code");

  return isSuccess;
}

export const getMessageFromKey = (messageKey: number) => {
  return MessageKey[messageKey];
};

export const getMessageKeyTranslate = (t: TFuncType, message: string) => {
  switch (message) {
    case "Error":
      return t("Common:Error");
    case "None":
      return t("Common:UnknownError");
    case "ErrorUserNotFound":
      return t("Errors:ErrorUserNotFound");
    case "ErrorExpiredActivationLink":
      return t("Errors:ErrorExpiredActivationLink");
    case "ErrorInvalidActivationLink":
      return t("Errors:ErrorInvalidActivationLink");
    case "ErrorConfirmURLError":
      return t("Errors:ErrorConfirmURLError");
    case "ErrorNotCorrectEmail":
      return t("Common:IncorrectEmail");
    case "LoginWithBruteForce":
      return t("Errors:LoginWithBruteForce");
    case "RecaptchaInvalid":
      return t("Errors:RecaptchaInvalid");
    case "LoginWithAccountNotFound":
      return t("Errors:LoginWithAccountNotFound");
    case "InvalidUsernameOrPassword":
      return t("Errors:InvalidUsernameOrPassword");
    case "SsoSettingsDisabled":
      return t("Errors:SsoSettingsDisabled");
    case "ErrorNotAllowedOption":
      return t("Errors:ErrorNotAllowedOption");
    case "SsoSettingsEmptyToken":
      return t("Errors:SsoSettingsEmptyToken");
    case "SsoSettingsNotValidToken":
      return t("Errors:SsoSettingsNotValidToken");
    case "SsoSettingsCantCreateUser":
      return t("Errors:SsoSettingsCantCreateUser");
    case "SsoSettingsUserTerminated":
      return t("Errors:SsoSettingsUserTerminated");
    case "SsoError":
      return t("Errors:SsoError");
    case "SsoAuthFailed":
      return t("Errors:SsoAuthFailed");
    case "SsoAttributesNotFound":
      return t("Errors:SsoAttributesNotFound");
    case "QuotaPaidUserLimitError":
      return t("Common:QuotaPaidUserLimitError");
    default:
      return t("Common:Error");
  }
};
